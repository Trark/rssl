/**********************************************************************
Copyright (c) 2023 Advanced Micro Devices, Inc. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
********************************************************************/

#include "light_sampler_bounds_shared.h"

ConstantBuffer<LightSamplingConstants> g_LightSampler_Constants;
RWStructuredBuffer<DispatchCommand> g_DispatchCommandBuffer;

TextureCube g_EnvironmentBuffer;
Texture2D g_TextureMaps[] : register(space99);
SamplerState g_TextureSampler; // Is a linear sampler

uint g_FrameIndex;

#include "light_sampler_bounds.hlsl"
#include "../../lights/light_sampling_volume.hlsl"
#include "../../math/random.hlsl"

#ifdef LIGHTSAMPLERBOUNDS_USE_THRESHOLD
#define STOCHASTIC_THRESHOLD_RADIANCE (1.0f / 2048.0f)
#endif

/**
 * Get the bounding box for a specific grid cell.
 * @param cellID    The ID of the grid cell.
 * @param maxBB     (Out) The return bounding box max values.
 * @return The bounding box min values.
 */
float3 getCellBB(uint3 cellID, out float3 maxBB)
{
    const float3 minBB = ((float3)cellID * g_LightSampler_Configuration[0].cellSize) + g_LightSampler_Configuration[0].sceneMin;
    maxBB = minBB + g_LightSampler_Configuration[0].cellSize;
    return minBB;
}

#define THREADX 4
#define THREADY 4
#define THREADZ 4

/**
 * Create required internal configuration values.
 * Calculates the required number of grid cells that need to be dispatched through an indirect call to Build.
 */
[numthreads(1, 1, 1)]
void CalculateBounds()
{
    const uint3 dispatch = uint3(THREADX, THREADY, THREADZ);
    // Get the scene bounds
    const float3 sceneMin = g_LightSampler_MinBounds[0];
    const float3 sceneMax = g_LightSampler_MaxBounds[0];

    // Ensure each cell is square
    const float3 sceneExtent = sceneMax - sceneMin;
    const float largestAxis = max(sceneExtent.x, max(sceneExtent.y, sceneExtent.z));
    const float cellScale = largestAxis / g_LightSampler_Constants.maxCellsPerAxis;
    const float3 cellNum = ceil(sceneExtent / cellScale);

    // Clamp max number of lights to those actually available
    const uint lightsPerCell = min(g_LightSampler_Constants.maxNumLightsPerCell, getNumberLights());

    // Update internal configuration values
    g_LightSampler_Configuration[0].numCells = uint4((uint3)cellNum, lightsPerCell);
    g_LightSampler_Configuration[0].cellSize = sceneExtent / cellNum;
    g_LightSampler_Configuration[0].sceneMin = sceneMin;
    g_LightSampler_Configuration[0].sceneExtent = sceneExtent;

    // Get total number of grid cells
    uint3 groups = g_LightSampler_Configuration[0].numCells.xyz;

    groups = (groups + dispatch - 1.xxx) / dispatch;
    g_DispatchCommandBuffer[0].num_groups_x = groups.x;
    g_DispatchCommandBuffer[0].num_groups_y = groups.y;
    g_DispatchCommandBuffer[0].num_groups_z = groups.z;
}

/**
 * Build an internal grid.
 */
[numthreads(THREADX, THREADY, THREADZ)]
void Build(in uint3 did : SV_DispatchThreadID, in uint gid : SV_GroupIndex)
{
    // Called per cell
    const uint3 cellID = did;
    if (any(cellID >= g_LightSampler_Configuration[0].numCells.xyz))
    {
        return;
    }

    // Calculate the bounding box for the current cell
    float3 maxBB;
    const float3 minBB = getCellBB(cellID, maxBB);

    // Clamp number of lights between max available and total valid lights
    float totalLights = getNumberLights();
    const uint maxLightsPerCell = min(g_LightSampler_Configuration[0].numCells.w, totalLights);

    // Loop through all lights
    const uint cellIndex = LightSamplerBounds::getCellIndex(cellID);
    const uint startIndex = cellIndex + 1;
    Random randomNG = MakeRandom(cellIndex, g_FrameIndex);
    uint storedLights = 0; //Num of stored lights in cell
    float totalWeight = 0.0f;
#ifndef LIGHTSAMPLERBOUNDS_USE_CDF
    float Wsum = 0.0f;
    uint M = 0;
#endif
    for (uint lightIndex = 0; lightIndex < totalLights; ++lightIndex)
    {
        // Calculate sampled contribution for light
        Light selectedLight = getLight(lightIndex);
        float y = evaluateLightVolume(selectedLight, minBB, maxBB);

        // Only add to the cells light list if it actually contributes to the lighting
#ifdef LIGHTSAMPLERBOUNDS_USE_THRESHOLD
        float probAdd = min(y / STOCHASTIC_THRESHOLD_RADIANCE, 1);
        y = max(y, STOCHASTIC_THRESHOLD_RADIANCE);
#endif

#ifndef LIGHTSAMPLERBOUNDS_USE_CDF
        float weight = y * totalLights; // targetPDF / sourcePDF where sourcePDF = 1/numLights
        Wsum += weight;
        ++M;
        if (storedLights < maxLightsPerCell)
        {
#ifdef LIGHTSAMPLERBOUNDS_USE_THRESHOLD
            //  Uses stochastic sampling
            if (probAdd >= randomNG.rand())
#endif
            {
                g_LightSampler_CellsIndex[startIndex + storedLights] = lightIndex;
                g_LightSampler_CellsCDF[startIndex + storedLights] = y;
                ++storedLights;
            }
        }
        else
        {
            if (((randomNG.rand() * Wsum) <= weight))
            {
                //A-Chao randomly replace an existing item
                uint replaceIndex = randomNG.randInt(maxLightsPerCell);
                g_LightSampler_CellsIndex[startIndex + replaceIndex] = lightIndex;
                g_LightSampler_CellsCDF[startIndex + replaceIndex] = y;
            }
        }
#else
#ifdef LIGHTSAMPLERBOUNDS_USE_THRESHOLD
        //  Uses stochastic sampling
        if (probAdd >= randomNG.rand())
#endif
        {
            // Store only the most important lights
            totalWeight += y;
            if (storedLights < maxLightsPerCell)
            {
                ++storedLights;
                g_LightSampler_CellsIndex[cellIndex + storedLights] = lightIndex;
                g_LightSampler_CellsCDF[cellIndex + storedLights] = y;
            }
            else
            {
                // Find the lowest contributing light and replace
                uint smallestLight = -1;
                float smallestCDF = y;
                uint writeIndex = startIndex + storedLights;
                for (uint light = startIndex; light < writeIndex; ++light)
                {
                    if (g_LightSampler_CellsCDF[light] < smallestCDF)
                    {
                        smallestLight = light;
                        smallestCDF = g_LightSampler_CellsCDF[light];
                    }
                }
                if (smallestLight != -1)
                {
                    g_LightSampler_CellsIndex[smallestLight] = lightIndex;
                    g_LightSampler_CellsCDF[smallestLight] = y;
                }
            }
        }
#endif
    }

    // Add table for cells light list
    g_LightSampler_CellsIndex[cellIndex] = storedLights;

#ifndef LIGHTSAMPLERBOUNDS_USE_CDF
    // Write out total sample weight
    g_LightSampler_CellsCDF[cellIndex] = Wsum / (float)M;
#else
    // Convert to CDF
    float runningCDF = 0.0f;
    for (uint i = startIndex; i <= cellIndex + storedLights; ++i)
    {
        runningCDF = runningCDF + g_LightSampler_CellsCDF[i];
        g_LightSampler_CellsCDF[i] = runningCDF;
    }
    float maxCDF = runningCDF;
    // Normalise CDF
    for (uint j = startIndex; j < cellIndex + storedLights; ++j)
    {
        g_LightSampler_CellsCDF[j] /= maxCDF;
    }
    g_LightSampler_CellsCDF[cellIndex + storedLights] = 1.0f;

    // Write out max cdf to cell table
    g_LightSampler_CellsCDF[cellIndex] = maxCDF / totalWeight;
#endif
}
