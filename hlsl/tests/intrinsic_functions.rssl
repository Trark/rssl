groupshared uint g_sharedValue;

[numthreads(1, 1, 1)]
void test() {
    uint out_u1;
    float out_f1;
    float2 out_f2;
    float3 out_f3;
    float4 out_f4;
    AllMemoryBarrier();
    AllMemoryBarrierWithGroupSync();
    DeviceMemoryBarrier();
    DeviceMemoryBarrierWithGroupSync();
    GroupMemoryBarrier();
    GroupMemoryBarrierWithGroupSync();
    bool all_1 = all(true);
    bool all_2 = all(bool2(true, true));
    bool all_3 = all(bool3(true, true, true));
    bool all_4 = all(bool4(true, true, true, true));
    bool any_1 = any(true);
    bool any_2 = any(bool2(true, true));
    bool any_3 = any(bool3(true, true, true));
    bool any_4 = any(bool4(true, true, true, true));
    int abs_i1 = abs(0);
    int2 abs_i2 = abs(int2(0, 0));
    int3 abs_i3 = abs(int3(0, 0, 0));
    int4 abs_i4 = abs(int4(0, 0, 0, 0));
    float abs_f1 = abs(0.0);
    float2 abs_f2 = abs(float2(0.0, 0.0));
    float3 abs_f3 = abs(float3(0.0, 0.0, 0.0));
    float4 abs_f4 = abs(float4(0.0, 0.0, 0.0, 0.0));
    float acos_1 = acos(0.0);
    float2 acos_2 = acos(float2(0.0, 0.0));
    float3 acos_3 = acos(float3(0.0, 0.0, 0.0));
    float4 acos_4 = acos(float4(0.0, 0.0, 0.0, 0.0));
    float asin_1 = asin(0.0);
    float2 asin_2 = asin(float2(0.0, 0.0));
    float3 asin_3 = asin(float3(0.0, 0.0, 0.0));
    float4 asin_4 = asin(float4(0.0, 0.0, 0.0, 0.0));
    float atan_1 = atan(0.0);
    float2 atan_2 = atan(float2(0.0, 0.0));
    float3 atan_3 = atan(float3(0.0, 0.0, 0.0));
    float4 atan_4 = atan(float4(0.0, 0.0, 0.0, 0.0));
    float atan2_1 = atan2(0.0, 0.0);
    float2 atan2_2 = atan2(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 atan2_3 = atan2(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 atan2_4 = atan2(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    uint asuint_i1 = asuint(0);
    uint2 asuint_i2 = asuint(int2(0, 0));
    uint3 asuint_i3 = asuint(int3(0, 0, 0));
    uint4 asuint_14 = asuint(int4(0, 0, 0, 0));
    uint asuint_f1 = asuint(0.0);
    uint2 asuint_f2 = asuint(float2(0.0, 0.0));
    uint3 asuint_f3 = asuint(float3(0.0, 0.0, 0.0));
    uint4 asuint_f4 = asuint(float4(0.0, 0.0, 0.0, 0.0));
    float asfloat_i1 = asfloat((int)0);
    float2 asfloat_i2 = asfloat(int2(0, 0));
    float3 asfloat_i3 = asfloat(int3(0, 0, 0));
    float4 asfloat_14 = asfloat(int4(0, 0, 0, 0));
    float asfloat_u1 = asfloat(0u);
    float2 asfloat_u2 = asfloat(uint2(0u, 0u));
    float3 asfloat_u3 = asfloat(uint3(0u, 0u, 0u));
    float4 asfloat_u4 = asfloat(uint4(0u, 0u, 0u, 0u));
    float asfloat_f1 = asfloat(0.0);
    float2 asfloat_f2 = asfloat(float2(0.0, 0.0));
    float3 asfloat_f3 = asfloat(float3(0.0, 0.0, 0.0));
    float4 asfloat_f4 = asfloat(float4(0.0, 0.0, 0.0, 0.0));
    float exp_f1 = exp(0.0);
    float2 exp_f2 = exp(float2(0.0, 0.0));
    float3 exp_f3 = exp(float3(0.0, 0.0, 0.0));
    float4 exp_f4 = exp(float4(0.0, 0.0, 0.0, 0.0));
    float exp2_f1 = exp2(0.0);
    float2 exp2_f2 = exp2(float2(0.0, 0.0));
    float3 exp2_f3 = exp2(float3(0.0, 0.0, 0.0));
    float4 exp2_f4 = exp2(float4(0.0, 0.0, 0.0, 0.0));
    float log_f1 = log(0.0);
    float2 log_f2 = log(float2(0.0, 0.0));
    float3 log_f3 = log(float3(0.0, 0.0, 0.0));
    float4 log_f4 = log(float4(0.0, 0.0, 0.0, 0.0));
    float log2_f1 = log2(0.0);
    float2 log2_f2 = log2(float2(0.0, 0.0));
    float3 log2_f3 = log2(float3(0.0, 0.0, 0.0));
    float4 log2_f4 = log2(float4(0.0, 0.0, 0.0, 0.0));
    float log10_f1 = log10(0.0);
    float2 log10_f2 = log10(float2(0.0, 0.0));
    float3 log10_f3 = log10(float3(0.0, 0.0, 0.0));
    float4 log10_f4 = log10(float4(0.0, 0.0, 0.0, 0.0));
    double asdouble_u2 = asdouble(0u, 0u);
    int clamp_i1 = clamp(0, 0, 0);
    int2 clamp_i2 = clamp(int2(0, 0), int2(0, 0), int2(0, 0));
    int3 clamp_i3 = clamp(int3(0, 0, 0), int3(0, 0, 0), int3(0, 0, 0));
    int4 clamp_14 = clamp(int4(0, 0, 0, 0), int4(0, 0, 0, 0), int4(0, 0, 0, 0));
    float clamp_f1 = clamp(0.0, 0.0, 0.0);
    float2 clamp_f2 = clamp(float2(0.0, 0.0), float2(0.0, 0.0), float2(0.0, 0.0));
    float3 clamp_f3 = clamp(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 clamp_f4 = clamp(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float cos_1 = cos(0.0);
    float2 cos_2 = cos(float2(0.0, 0.0));
    float3 cos_3 = cos(float3(0.0, 0.0, 0.0));
    float4 cos_4 = cos(float4(0.0, 0.0, 0.0, 0.0));
    float cosh_1 = cosh(0.0);
    float2 cosh_2 = cosh(float2(0.0, 0.0));
    float3 cosh_3 = cosh(float3(0.0, 0.0, 0.0));
    float4 cosh_4 = cosh(float4(0.0, 0.0, 0.0, 0.0));
    float3 cross_3 = cross(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float distance_1 = distance(float1(0.0), float1(0.0));
    float distance_2 = distance(float2(0.0, 0.0), float2(0.0, 0.0));
    float distance_3 = distance(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float distance_4 = distance(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    int dot_i1 = dot((int1)0, (int1)0);
    int dot_i2 = dot(int2(0, 0), int2(0, 0));
    int dot_i3 = dot(int3(0, 0, 0), int3(0, 0, 0));
    int dot_14 = dot(int4(0, 0, 0, 0), int4(0, 0, 0, 0));
    float dot_f1 = dot(float1(0.0), float1(0.0));
    float dot_f2 = dot(float2(0.0, 0.0), float2(0.0, 0.0));
    float dot_f3 = dot(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float dot_f4 = dot(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float3 mul_f3x3_f3 = mul((float3x3)0, (float3)0);
    float4 mul_f4x4_f4 = mul((float4x4)0, (float4)0);
    float f16tof32_1 = f16tof32(0u);
    uint f32tof16_1 = f32tof16(0.0);
    float floor_1 = floor(0.0);
    float2 floor_2 = floor(float2(0.0, 0.0));
    float3 floor_3 = floor(float3(0.0, 0.0, 0.0));
    float4 floor_4 = floor(float4(0.0, 0.0, 0.0, 0.0));
    float ceil_1 = ceil(0.0);
    float2 ceil_2 = ceil(float2(0.0, 0.0));
    float3 ceil_3 = ceil(float3(0.0, 0.0, 0.0));
    float4 ceil_4 = ceil(float4(0.0, 0.0, 0.0, 0.0));
    float trunc_1 = trunc(0.0);
    float2 trunc_2 = trunc(float2(0.0, 0.0));
    float3 trunc_3 = trunc(float3(0.0, 0.0, 0.0));
    float4 trunc_4 = trunc(float4(0.0, 0.0, 0.0, 0.0));
    float round_1 = round(0.0);
    float2 round_2 = round(float2(0.0, 0.0));
    float3 round_3 = round(float3(0.0, 0.0, 0.0));
    float4 round_4 = round(float4(0.0, 0.0, 0.0, 0.0));
    float frac_1 = frac(0.0);
    float2 frac_2 = frac(float2(0.0, 0.0));
    float3 frac_3 = frac(float3(0.0, 0.0, 0.0));
    float4 frac_4 = frac(float4(0.0, 0.0, 0.0, 0.0));
    float modf_1 = modf(0.0, out_f1);
    float2 modf_2 = modf(float2(0.0, 0.0), out_f2);
    float3 modf_3 = modf(float3(0.0, 0.0, 0.0), out_f3);
    float4 modf_4 = modf(float4(0.0, 0.0, 0.0, 0.0), out_f4);
    float lerp_f1 = lerp(0.0, 0.0, 0.0);
    float2 lerp_f2 = lerp(float2(0.0, 0.0), float2(0.0, 0.0), float2(0.0, 0.0));
    float3 lerp_f3 = lerp(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 lerp_f4 = lerp(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    bool isnan_1 = isnan(0.0);
    bool2 isnan_2 = isnan(float2(0.0, 0.0));
    bool3 isnan_3 = isnan(float3(0.0, 0.0, 0.0));
    bool4 isnan_4 = isnan(float4(0.0, 0.0, 0.0, 0.0));
    bool isinf_1 = isinf(0.0);
    bool2 isinf_2 = isinf(float2(0.0, 0.0));
    bool3 isinf_3 = isinf(float3(0.0, 0.0, 0.0));
    bool4 isinf_4 = isinf(float4(0.0, 0.0, 0.0, 0.0));
    bool isfinite_1 = isfinite(0.0);
    bool2 isfinite_2 = isfinite(float2(0.0, 0.0));
    bool3 isfinite_3 = isfinite(float3(0.0, 0.0, 0.0));
    bool4 isfinite_4 = isfinite(float4(0.0, 0.0, 0.0, 0.0));
    float length_1 = length(float1(0.0));
    float length_2 = length(float2(0.0, 0.0));
    float length_3 = length(float3(0.0, 0.0, 0.0));
    float length_4 = length(float4(0.0, 0.0, 0.0, 0.0));
    int min_i1 = min(0, 0);
    int2 min_i2 = min(int2(0, 0), int2(0, 0));
    int3 min_i3 = min(int3(0, 0, 0), int3(0, 0, 0));
    int4 min_i4 = min(int4(0, 0, 0, 0), int4(0, 0, 0, 0));
    float min_f1 = min(0.0, 0.0);
    float2 min_f2 = min(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 min_f3 = min(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 min_f4 = min(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    int max_i1 = max(0, 0);
    int2 max_i2 = max(int2(0, 0), int2(0, 0));
    int3 max_i3 = max(int3(0, 0, 0), int3(0, 0, 0));
    int4 max_i4 = max(int4(0, 0, 0, 0), int4(0, 0, 0, 0));
    float max_f1 = max(0.0, 0.0);
    float2 max_f2 = max(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 max_f3 = max(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 max_f4 = max(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float1 normalize_1 = normalize(float1(0.0));
    float2 normalize_2 = normalize(float2(0.0, 0.0));
    float3 normalize_3 = normalize(float3(0.0, 0.0, 0.0));
    float4 normalize_4 = normalize(float4(0.0, 0.0, 0.0, 0.0));
    float rcp_f1 = rcp(0.0);
    float2 rcp_f2 = rcp(float2(0.0, 0.0));
    float3 rcp_f3 = rcp(float3(0.0, 0.0, 0.0));
    float4 rcp_f4 = rcp(float4(0.0, 0.0, 0.0, 0.0));
    float reflect_f1 = reflect(0.0, 0.0);
    float2 reflect_f2 = reflect(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 reflect_f3 = reflect(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 reflect_f4 = reflect(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float refract_f1 = refract(0.0, 0.0, 0.0);
    float2 refract_f2 = refract(float2(0.0, 0.0), float2(0.0, 0.0), 0.0);
    float3 refract_f3 = refract(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0), 0.0);
    float4 refract_f4 = refract(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0), 0.0);
    uint countbits_u1 = countbits(0u);
    uint2 countbits_u2 = countbits(uint2(0u, 0u));
    uint3 countbits_u3 = countbits(uint3(0u, 0u, 0u));
    uint4 countbits_u4 = countbits(uint4(0u, 0u, 0u, 0u));
    uint reversebits_u1 = reversebits(0u);
    uint2 reversebits_u2 = reversebits(uint2(0u, 0u));
    uint3 reversebits_u3 = reversebits(uint3(0u, 0u, 0u));
    uint4 reversebits_u4 = reversebits(uint4(0u, 0u, 0u, 0u));
    uint firstbithigh_u1 = firstbithigh(0u);
    uint2 firstbithigh_u2 = firstbithigh(uint2(0u, 0u));
    uint3 firstbithigh_u3 = firstbithigh(uint3(0u, 0u, 0u));
    uint4 firstbithigh_u4 = firstbithigh(uint4(0u, 0u, 0u, 0u));
    uint firstbitlow_u1 = firstbitlow(0u);
    uint2 firstbitlow_u2 = firstbitlow(uint2(0u, 0u));
    uint3 firstbitlow_u3 = firstbitlow(uint3(0u, 0u, 0u));
    uint4 firstbitlow_u4 = firstbitlow(uint4(0u, 0u, 0u, 0u));
    float pow_f1 = pow(0.0, 0.0);
    float2 pow_f2 = pow(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 pow_f3 = pow(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 pow_f4 = pow(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float saturate_1 = saturate(0.0);
    float2 saturate_2 = saturate(float2(0.0, 0.0));
    float3 saturate_3 = saturate(float3(0.0, 0.0, 0.0));
    float4 saturate_4 = saturate(float4(0.0, 0.0, 0.0, 0.0));
    int sign_i1 = sign(0);
    int2 sign_i2 = sign(int2(0, 0));
    int3 sign_i3 = sign(int3(0, 0, 0));
    int4 sign_i4 = sign(int4(0, 0, 0, 0));
    int sign_f1 = sign(0.0);
    int2 sign_f2 = sign(float2(0.0, 0.0));
    int3 sign_f3 = sign(float3(0.0, 0.0, 0.0));
    int4 sign_f4 = sign(float4(0.0, 0.0, 0.0, 0.0));
    float sin_1 = sin(0.0);
    float2 sin_2 = sin(float2(0.0, 0.0));
    float3 sin_3 = sin(float3(0.0, 0.0, 0.0));
    float4 sin_4 = sin(float4(0.0, 0.0, 0.0, 0.0));
    float sinh_1 = sinh(0.0);
    float2 sinh_2 = sinh(float2(0.0, 0.0));
    float3 sinh_3 = sinh(float3(0.0, 0.0, 0.0));
    float4 sinh_4 = sinh(float4(0.0, 0.0, 0.0, 0.0));
    sincos(0.0, out_f1, out_f1);
    sincos(float2(0.0, 0.0), out_f2, out_f2);
    sincos(float3(0.0, 0.0, 0.0), out_f3, out_f3);
    sincos(float4(0.0, 0.0, 0.0, 0.0), out_f4, out_f4);
    float tan_1 = tan(0.0);
    float2 tan_2 = tan(float2(0.0, 0.0));
    float3 tan_3 = tan(float3(0.0, 0.0, 0.0));
    float4 tan_4 = tan(float4(0.0, 0.0, 0.0, 0.0));
    float tanh_1 = tanh(0.0);
    float2 tanh_2 = tanh(float2(0.0, 0.0));
    float3 tanh_3 = tanh(float3(0.0, 0.0, 0.0));
    float4 tanh_4 = tanh(float4(0.0, 0.0, 0.0, 0.0));
    float smoothstep_f1 = smoothstep(0.0, 0.0, 0.0);
    float2 smoothstep_f2 = smoothstep(float2(0.0, 0.0), float2(0.0, 0.0), float2(0.0, 0.0));
    float3 smoothstep_f3 = smoothstep(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 smoothstep_f4 = smoothstep(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float sqrt_1 = sqrt(0.0);
    float2 sqrt_2 = sqrt(float2(0.0, 0.0));
    float3 sqrt_3 = sqrt(float3(0.0, 0.0, 0.0));
    float4 sqrt_4 = sqrt(float4(0.0, 0.0, 0.0, 0.0));
    float rsqrt_1 = rsqrt(0.0);
    float2 rsqrt_2 = rsqrt(float2(0.0, 0.0));
    float3 rsqrt_3 = rsqrt(float3(0.0, 0.0, 0.0));
    float4 rsqrt_4 = rsqrt(float4(0.0, 0.0, 0.0, 0.0));
    float step_f1 = step(0.0, 0.0);
    float2 step_f2 = step(float2(0.0, 0.0), float2(0.0, 0.0));
    float3 step_f3 = step(float3(0.0, 0.0, 0.0), float3(0.0, 0.0, 0.0));
    float4 step_f4 = step(float4(0.0, 0.0, 0.0, 0.0), float4(0.0, 0.0, 0.0, 0.0));
    float2x2 transpose_f2x2 = transpose(float2x2(0.0, 0.0, 0.0, 0.0));
    float3x3 transpose_f3x3 = transpose(float3x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    float4x4 transpose_f4x4 = transpose(float4x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0));
    float ddx_f1 = ddx(0.0);
    float2 ddx_f2 = ddx(float2(0.0, 0.0));
    float3 ddx_f3 = ddx(float3(0.0, 0.0, 0.0));
    float4 ddx_f4 = ddx(float4(0.0, 0.0, 0.0, 0.0));
    float ddx_coarse_f1 = ddx_coarse(0.0);
    float2 ddx_coarse_f2 = ddx_coarse(float2(0.0, 0.0));
    float3 ddx_coarse_f3 = ddx_coarse(float3(0.0, 0.0, 0.0));
    float4 ddx_coarse_f4 = ddx_coarse(float4(0.0, 0.0, 0.0, 0.0));
    float ddx_fine_f1 = ddx_fine(0.0);
    float2 ddx_fine_f2 = ddx_fine(float2(0.0, 0.0));
    float3 ddx_fine_f3 = ddx_fine(float3(0.0, 0.0, 0.0));
    float4 ddx_fine_f4 = ddx_fine(float4(0.0, 0.0, 0.0, 0.0));
    float ddy_f1 = ddy(0.0);
    float2 ddy_f2 = ddy(float2(0.0, 0.0));
    float3 ddy_f3 = ddy(float3(0.0, 0.0, 0.0));
    float4 ddy_f4 = ddy(float4(0.0, 0.0, 0.0, 0.0));
    float ddy_coarse_f1 = ddy_coarse(0.0);
    float2 ddy_coarse_f2 = ddy_coarse(float2(0.0, 0.0));
    float3 ddy_coarse_f3 = ddy_coarse(float3(0.0, 0.0, 0.0));
    float4 ddy_coarse_f4 = ddy_coarse(float4(0.0, 0.0, 0.0, 0.0));
    float ddy_fine_f1 = ddy_fine(0.0);
    float2 ddy_fine_f2 = ddy_fine(float2(0.0, 0.0));
    float3 ddy_fine_f3 = ddy_fine(float3(0.0, 0.0, 0.0));
    float4 ddy_fine_f4 = ddy_fine(float4(0.0, 0.0, 0.0, 0.0));
    InterlockedAdd(g_sharedValue, 0u, out_u1);
    InterlockedAnd(g_sharedValue, 0u, out_u1);
    InterlockedCompareExchange(g_sharedValue, 0u, 0u, out_u1);
    InterlockedCompareStore(g_sharedValue, 0u, 0u);
    InterlockedExchange(g_sharedValue, 0u, out_u1);
    InterlockedMax(g_sharedValue, 0u, out_u1);
    InterlockedMin(g_sharedValue, 0u, out_u1);
    InterlockedOr(g_sharedValue, 0u, out_u1);
    InterlockedXor(g_sharedValue, 0u, out_u1);
    uint lane_count = WaveGetLaneCount();
    uint lane_index = WaveGetLaneIndex();
    bool is_first = WaveIsFirstLane();
    bool any_true = WaveActiveAnyTrue(true);
    bool all_true = WaveActiveAllTrue(true);
    uint4 ballot = WaveActiveBallot(true);
    float3 wave_read_lane_at_f3 = WaveReadLaneAt(float3(0.0, 0.0, 0.0), 0u);
    float3 wave_read_lane_first_f3 = WaveReadLaneFirst(float3(0.0, 0.0, 0.0));
    bool3 wave_active_all_equal_f3 = WaveActiveAllEqual(float3(0.0, 0.0, 0.0));
    uint wave_active_count_bits = WaveActiveCountBits(true);
    float3 wave_active_sum_f3 = WaveActiveSum(float3(0.0, 0.0, 0.0));
    float3 wave_active_product_f3 = WaveActiveProduct(float3(0.0, 0.0, 0.0));
    uint3 wave_active_bitand_u3 = WaveActiveBitAnd(uint3(0u, 0u, 0u));
    uint3 wave_active_bitor_u3 = WaveActiveBitOr(uint3(0u, 0u, 0u));
    uint3 wave_active_bitxor_u3 = WaveActiveBitXor(uint3(0u, 0u, 0u));
    float3 wave_active_min_f3 = WaveActiveMin(float3(0.0, 0.0, 0.0));
    float3 wave_active_max_f3 = WaveActiveMax(float3(0.0, 0.0, 0.0));
    uint wave_prefix_count_bits = WavePrefixCountBits(true);
    float3 wave_prefix_product_f3 = WavePrefixProduct(float3(0.0, 0.0, 0.0));
    float3 wave_prefix_sum_f3 = WavePrefixSum(float3(0.0, 0.0, 0.0));
    float3 quad_read_x_f3 = QuadReadAcrossX(float3(0.0, 0.0, 0.0));
    float3 quad_read_y_f3 = QuadReadAcrossY(float3(0.0, 0.0, 0.0));
    float3 quad_read_d_f3 = QuadReadAcrossDiagonal(float3(0.0, 0.0, 0.0));
    float3 quad_read_at_f3 = QuadReadLaneAt(float3(0.0, 0.0, 0.0), 0u);
}
