const ByteAddressBuffer g_input : register(t0);
const RWByteAddressBuffer g_output : register(u1);

struct MyStruct
{
    uint m;
};

void test() {
    const uint x1 = g_input.Load(0);
    const uint2 x2 = g_input.Load2(0);
    const uint3 x3 = g_input.Load3(0);
    const uint4 x4 = g_input.Load4(0);
    const MyStruct x5 = g_input.Load<MyStruct>(0);

    const uint y1 = g_output.Load(0);
    const uint2 y2 = g_output.Load2(0);
    const uint3 y3 = g_output.Load3(0);
    const uint4 y4 = g_output.Load4(0);
    const MyStruct y5 = g_output.Load<MyStruct>(0);

    g_output.Store(0, x1);
    g_output.Store2(0, x2);
    g_output.Store3(0, x3);
    g_output.Store4(0, x4);

    g_output.Store(0.0, 0.0);
    g_output.Store2(0.0, 0.0);
    g_output.Store3(0.0, 0.0);
    g_output.Store4(0.0, 0.0);

    uint outInt;

    g_input.GetDimensions(outInt);
    g_output.GetDimensions(outInt);

    g_output.InterlockedAdd(4, 7, outInt);
    g_output.InterlockedAnd(4, 7, outInt);
#if !RSSL_TARGET_MSL
    g_output.InterlockedCompareExchange(0, 0, 0, outInt);
    g_output.InterlockedCompareStore(0, 0, outInt);
#endif
    g_output.InterlockedExchange(4, 7, outInt);
    g_output.InterlockedMax(4, 7, outInt);
    g_output.InterlockedMin(4, 7, outInt);
    g_output.InterlockedOr(4, 7, outInt);
    g_output.InterlockedXor(4, 7, outInt);
}

Pipeline Test
{
    ComputeShader = test;
}
